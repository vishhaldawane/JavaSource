Association	primary key/foreginkey - 
|isAhasA	 |joins / nested queries
|		 | 1-1, 1-N, N-1, N-N 
class is NOT a Table
  |
  we have to fill up
  the gap by taking help 
  of any ORM tool
  |
Table is NOT a class

		BankAccount <--abstract class
			|
			| acno,balance
			| accountHolderName
			| ArrayList<Address> addrList;
			| String accountEmailAddress; - HAS"A"
			| String registeredPhoneNumber;
	--------------------------------------
	|ISa			|ISa
	SavingsAccount	CurrentAccount
	|rate			|overDraftLimit		
-------------------
|ISa
FixedDepositAccount
| maturityPeriod

his bank user id would be 459 <-- and password is 8765
  
SavingsAccount      sa = new SavingsAccount(101,HamidRaza,80000,1,hamid@gmail.com,1231231231,5.4);
FixedDepositAccount fd = new FixedDepositAccount(101,HamidRaza,80000,1,hamid@gmail.com,1231231231,5.4,2035);
CurrentAccount      ca = new CurrentAccount(101,HamidRaza,80000,1,hamid@gmail.com,1231231231,5.4,2035,3);

Address		    homeAddr = new Address(44, WA, MG Road, Addateegala, AndhraPradesh,450450);
Address		    officeAddr  = new Address(88, EA, SV Road, Mumbai,Maharashtra,340340);


101
|
Hamid is adding 3 people as payee
		|
		102 <-- Paris
		103 <-- Ashok
		104 <-- Jagdish

104
|
Jagdish is adding 2 people as payee
		  |
		 101 <- Hamid
		 102 <- Paris
102
|
Paris is adding 4 people as payee
		|
		101 <-- Hamid
		103 <-- Ashok
		104 <-- Jagdish
		105 <-- Mythili
		someother bank payee here

	what if we would like to store these object details
	on a storage????

		"object details" are private
			 |
		-------------------
		|		|
		file		database table
		|		|
	serialization		persistence
				|
			--------------------
			|		|
			BMP		CMP
			|<-developer	| <-- hibernate
	beanProvider-managed	container-managed
	|			|
	manually written	automatically 
	code using JDBC		generated JDBC
		
	

	Hibernate is AN ORM FRAMEWORK
				|
				semi-developed application

	pom.xml <-- will specify the hibernate "dependencies"




	Program
	|
	1. Table
	2. POJO mapped as per the Table
	3. Hibernate Framework 
	4. hibernate configuration file - .xml or .properties
	4. Application to implement this example


	1. dept/student table <-- to be autogenerated via class OR NOT
	2. class Dept/Student <-- class would specify 
			mapped table and the primary key

	3. Hibernate Framework <-- via pom.xml <--Maven project
	4. hibernate.cfg.xml  | hibernate.properties 
		|			|
		tags			key/value pair
		|			|
		--------------------------
			|
	   driver/url/username/password/other settings
	   |	  |	 |	|		|
  OracleDriver jdbc:..  scott tiger	hibernate settings

	5. class with main() function to implement above work
	
	
	1.		dept20
			|
		depto	dname	location


	2. @Entity <-- for table mapping
	   @Table(name="dept20")
	   class Department
	   {
		@Id <-- for primary key
		@Column(name="deptno") <-- actual table column
		int departmentNumber;

		@Column(name="dname")<-- actual table column		
		String departmentName;

		@Column(name="loc")<-- actual table column
		String departmentLocation;

		setter/getter
	   }	

	   }





	DB1  DB2 ..DBn
	|
	------------------------------
	|			|
	Hibernate		manualJdbc
	|			|
	hibernate.cfg.xml	|
	|			|
	Your Java App1		Your Java App2
	|
	USer

	

for custom queries = HQL 



	
	
	